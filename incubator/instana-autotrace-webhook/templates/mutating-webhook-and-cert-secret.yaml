{{- $caSecretName := include "instana-autotrace-webhook.caSecretName" . -}}
{{- $existingCA := lookup "v1" "Secret" .Release.Namespace $caSecretName -}}

{{/* Generate a new CA or use existing one */}}
{{- $caKey := "" -}}
{{- $caCert := "" -}}
{{- $caForSigning := dict -}}
{{- $isExistingCA := false -}}

{{- if $existingCA -}}
  {{/* Use the existing CA for storage */}}
  {{- $caKey = index $existingCA.data "ca.key" -}}
  {{- $caCert = index $existingCA.data "ca.crt" -}}
  {{- $caForSigning = dict "Key" $caKey "Cert" $caCert -}}
  {{- $isExistingCA = true -}}
{{- else -}}
  {{/* Generate a new CA certificate valid for 10 years (3650 days) */}}
  {{- $newCA := genCA "instana-autotrace-webhook-ca" 3650 -}}
  {{- $caForSigning = $newCA -}}
  {{- $caKey = $newCA.Key | b64enc -}}
  {{- $caCert = $newCA.Cert | b64enc -}}
{{- end -}}

{{- if not .Values.openshift.enabled }}
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ $caSecretName }}
  labels:
    {{- include "instana-autotrace-webhook.commonLabels" . | nindent 4 }}
data:
  ca.key: {{ $caKey | quote }}
  ca.crt: {{ $caCert | quote }}
---

{{- $tlsSecretName := include "instana-autotrace-webhook.tlsSecretName" . -}}
{{- $existingLeaf := lookup "v1" "Secret" .Release.Namespace $tlsSecretName -}}

{{- $serviceName := .Release.Name -}}
{{- $namespace := .Release.Namespace -}}
{{- $altNames := list
  (printf "%s.%s.svc" $serviceName $namespace)
  (printf "%s.%s.svc.cluster.local" $serviceName $namespace)
-}}

{{- $wantSANs := join "," $altNames -}}
{{- $needsLeaf := false -}}
{{- if not $existingLeaf -}}
  {{- $needsLeaf = true -}}
{{- else -}}
  {{- $have := index $existingLeaf.metadata.annotations "instana/sans" | default "" -}}
  {{- if ne $have $wantSANs }}
    {{- $needsLeaf = true -}}
  {{- end -}}
{{- end -}}
{{- $tlsCrt := "" -}}
{{- $tlsKey := "" -}}
{{- if $needsLeaf }}
  {{- $leaf := genSignedCert $serviceName nil $altNames 365 $caForSigning -}}
  {{- $tlsCrt = $leaf.Cert | b64enc}}
  {{- $tlsKey = $leaf.Key | b64enc}}
{{- else -}}
  {{- $tlsCrt = index $existingLeaf.data "tls.crt" }}
  {{- $tlsKey = index $existingLeaf.data "tls.key" }}
{{- end }}
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: {{ $tlsSecretName }}
  annotations:
    instana/sans: {{ $wantSANs | quote }}
  labels:
    {{- include "instana-autotrace-webhook.commonLabels" . | nindent 4 }}
data:
  tls.crt: {{ $tlsCrt | quote }}
  tls.key: {{ $tlsKey | quote }}
  ca.crt: {{ $caCert | quote }}
---
{{- end }}

apiVersion: admissionregistration.k8s.io/{{ include "k8s-admission-controller-api-version" . }}
kind: MutatingWebhookConfiguration
metadata:
  name: {{ .Release.Name }}
  labels:
    {{- include "instana-autotrace-webhook.commonLabels" . | nindent 4 }}
    autotrace: instana-autotrace-webhook-impl
{{- if .Values.openshift.enabled }}
  annotations:
    service.beta.openshift.io/inject-cabundle: "true"
{{- end }}
webhooks:
- name: autotrace-webhook.instana.com
  failurePolicy: {{ .Values.autotrace.failurePolicy }} # We do not want to cause any trouble in scheduling
  reinvocationPolicy: IfNeeded # If some other mutating webhook adds containers or other stuff, we wanna get another go ;-)
  matchPolicy: Equivalent
  rules:
  - apiGroups: ['']
    apiVersions: ['v1', 'v1beta1']
    resources:
    - pods
    - configmaps
    operations:
      - 'CREATE'
  {{- if .Values.autotrace.enableHigherLevelResourceMutation }}
  # Higher-level resources are only included when enableHigherLevelResourceMutation is true
  - apiGroups: ['apps']
    apiVersions: ['v1', 'v1beta1']
    resources:
    - deployments
    - daemonsets
    - replicaset
    - statefulset
    operations:
      - 'CREATE'
  - apiGroups: ['apps.openshift.io']
    apiVersions: ['v1']
    resources:
    - deploymentconfigs
    operations:
      - 'CREATE'
  {{- end }}
  clientConfig:
    service:
      namespace: {{ .Release.Namespace }}
      name: {{ .Release.Name }}
      port: {{ .Values.webhook.service.port }}
      path: /mutate
{{- if not .Values.openshift.enabled }}
    {{/* Use the CA certificate we've generated for signing */}}
    caBundle: {{ $caCert | quote }}
{{- end }}
  admissionReviewVersions: {{ include "admission-controller-api-versions" . | indent 4}}
{{- if (semverCompare ">=1.12-0" .Capabilities.KubeVersion.GitVersion) }}
  # Only include 'sideEffects' field in Kubernetes 1.12+
  sideEffects: NoneOnDryRun
{{- end }}
  timeoutSeconds: 30
  namespaceSelector:
    matchExpressions:
      - key: "kubernetes.io/metadata.name"
        operator: NotIn
        values: {{ (append .Values.autotrace.exclude.selector .Release.Namespace) | toYaml | nindent 10 }}

# Made with Bob
